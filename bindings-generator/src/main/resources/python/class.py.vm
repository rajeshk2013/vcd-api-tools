"""
 Copyright (c) ${year} VMware, Inc. All rights reserved.
"""
from pprint import pformat
from six import iteritems
import re
#foreach(${import} in ${class.imports})
#if(${class.parent} and (${import.definition} == ${class.parent}))
from ${import.module} import ${import.definition}
#end
#end


class ${class.name}(#if(${class.parent})${class.parent}#{else}object#end):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        #foreach(${field} in ${class.fields})
        '${field.displayName}': '${field.type}'#if($foreach.count<${class.fields.size()}),#end

        #end
    }

    attribute_map = {
        #foreach(${field} in ${class.fields})
        '${field.displayName}': '${field.name}'#if($foreach.count < ${class.fields.size()}),#end

        #end
    }

    def __init__(self#if(${class.fields.size()} > 0),#end #foreach(${field} in ${class.fields})${field.displayName}=None#if($foreach.count < ${class.fields.size()}),#end#end):
        #if(${class.fields.size()} == 0)
        pass
        #else
        #foreach(${field} in ${class.fields})
        self._${field.displayName} = None
        #end

        #if(${class.fields.size()} > 0)
        #foreach(${field} in ${class.fields})
        if ${field.displayName} is not None:
            self.${field.displayName} = ${field.displayName}
        #end
        #end
        #end

    #foreach(${field} in ${class.fields})
    @property
    def ${field.displayName}(self):
        return self._${field.displayName}
    
    @${field.displayName}.setter
    def ${field.displayName}(self, ${field.displayName}):
        self._${field.displayName} = ${field.displayName}

    #end

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ${class.name}):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
